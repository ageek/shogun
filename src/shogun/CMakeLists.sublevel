#   CMake-script for SHOGUN Machine Learning Toolbox
#   Copyright (C) 2013  Bj√∂rn Esser  <besser82@fedoraproject.org>
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.


#####  Generate auto-sources  #####
FILE( GLOB _AUTOSOURCES "*.template" )
STRING( REGEX REPLACE "^${CMAKE_SOURCE_DIR}/" "" _CURDIR "${CMAKE_CURRENT_SOURCE_DIR}")
FOREACH( _AUTOSOURCE ${_AUTOSOURCES} )
  STRING( REGEX REPLACE ".template$" "" _AUTOSOURCE "${_AUTOSOURCE}" )
  STRING( REGEX REPLACE "^${CMAKE_CURRENT_SOURCE_DIR}/" "" _AUTOSOURCE "${_AUTOSOURCE}" )

  CONFIGURE_FILE( "${CMAKE_CURRENT_SOURCE_DIR}/${_AUTOSOURCE}.template"
    "${CMAKE_CURRENT_BINARY_DIR}/${_AUTOSOURCE}" COPYONLY )

  MESSAGE( STATUS "Generating auto-source: ${_CURDIR}/${_AUTOSOURCE}" )
  
  EXECUTE_PROCESS( COMMAND ${PYTHON_EXECUTABLE} "${CMAKE_BINARY_DIR}/cmake/auxilary_scripts/${_AUTOSOURCE}.py"
    "${CMAKE_CURRENT_BINARY_DIR}/${_AUTOSOURCE}" -in ${CMAKE_BINARY_DIR}/include/shogun/headers_list.txt
    WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}/include/shogun" )

  LIST( APPEND _AUTO_SOURCES "${CMAKE_CURRENT_BINARY_DIR}/${_AUTOSOURCE}" )
ENDFOREACH( _AUTOSOURCE ${_AUTOSOURCES})


#####  Generate protobuf-sources  #####
IF( PROTOBUF_FOUND )
  FILE(GLOB _PB_SOURCE *.proto)
  IF( NOT "${_PB_SOURCE}" STREQUAL "" )
    PROTOBUF_GENERATE_CPP( _PB_SOURCES _PB_HEADERS ${_PB_SOURCE} )
  ENDIF( NOT "${_PB_SOURCE}" STREQUAL "" )
ENDIF( PROTOBUF_FOUND )


#####  Set needed include directories  #####
INCLUDE_DIRECTORIES( ${${PROJECT_VAR_PREFIX}INCLUDE_DIRS} )


#####  Create object-target  #####
STRING( REGEX REPLACE "^.*shogun/" "" _TARGET "${CMAKE_CURRENT_SOURCE_DIR}" )
STRING( REGEX REPLACE "/" "-" _TARGET "${_TARGET}" )
SET( _TARGET "${PROJECT_NAME}-${_TARGET}" )

FILE( GLOB _SOURCES "*.c" "*.cpp" )

IF( NOT "${_SOURCES}" STREQUAL "" )
  SET( ${PROJECT_VAR_PREFIX}OBJECT_TARGETS
       ${${PROJECT_VAR_PREFIX}OBJECT_TARGETS} "$<TARGET_OBJECTS:${_TARGET}>"
       CACHE INTERNAL "Tracking-var for object targets" )

  SET( ${PROJECT_VAR_PREFIX}OBJECT_TARGETS_INTERNAL
       ${${PROJECT_VAR_PREFIX}OBJECT_TARGETS_INTERNAL} "${_TARGET}"
       CACHE INTERNAL "Tracking-var for internal object targets" )

  ADD_LIBRARY( ${_TARGET} OBJECT ${_SOURCES} )
  SET_TARGET_PROPERTIES( ${_TARGET}
    PROPERTIES POSITION_INDEPENDENT_CODE TRUE
      COMPILE_FLAGS ${${PROJECT_VAR_PREFIX}CXXFLAGS} )

  IF( "${_SOURCES}" MATCHES ".*SFMT.*" )
    SET_TARGET_PROPERTIES( ${_TARGET}
      PROPERTIES COMPILE_DEFINITIONS "SFMT_MEXP=19937" )
  ENDIF( "${_SOURCES}" MATCHES ".*SFMT.*" )
  
  IF( "${_SOURCES}" MATCHES ".*dSFMT.*" )
    SET_TARGET_PROPERTIES( ${_TARGET}
      PROPERTIES COMPILE_DEFINITIONS "DSFMT_MEXP=19937" )
  ENDIF( "${_SOURCES}" MATCHES ".*dSFMT.*" )

ENDIF( NOT "${_SOURCES}" STREQUAL "" )


#####  Create object-target for autosources  #####
IF( NOT "${_AUTO_SOURCES}" STREQUAL "" )
  SET( ${PROJECT_VAR_PREFIX}OBJECT_TARGETS
       ${${PROJECT_VAR_PREFIX}OBJECT_TARGETS} "$<TARGET_OBJECTS:${_TARGET}-autosource>"
       CACHE INTERNAL "Tracking-var for object targets" )

  SET( ${PROJECT_VAR_PREFIX}OBJECT_TARGETS_INTERNAL
       ${${PROJECT_VAR_PREFIX}OBJECT_TARGETS_INTERNAL} "${_TARGET}-autosource"
       CACHE INTERNAL "Tracking-var for internal object targets" )

  ADD_LIBRARY( ${_TARGET}-autosource OBJECT ${_AUTO_SOURCES} )
  SET_TARGET_PROPERTIES( ${_TARGET}-autosource
    PROPERTIES POSITION_INDEPENDENT_CODE TRUE
      COMPILE_FLAGS ${${PROJECT_VAR_PREFIX}CXXFLAGS} )

ENDIF( NOT "${_AUTO_SOURCES}" STREQUAL "" )


#####  Create object-target for protobuf  #####
IF( NOT "${_PB_SOURCES}" STREQUAL "" )
  SET( ${PROJECT_VAR_PREFIX}OBJECT_TARGETS
       ${${PROJECT_VAR_PREFIX}OBJECT_TARGETS} "$<TARGET_OBJECTS:${_TARGET}-pbautogen>"
       CACHE INTERNAL "Tracking-var for object targets" )
       
  ADD_LIBRARY( ${_TARGET}-pbautogen OBJECT ${_PB_SOURCES} )
  SET_TARGET_PROPERTIES( ${_TARGET}-pbautogen
     PROPERTIES POSITION_INDEPENDENT_CODE TRUE
       COMPILE_FLAGS ${${PROJECT_VAR_PREFIX}CXXFLAGS} )

  #####  Make sure protobuf-autogen-target is build before all other targets
  FOREACH( _OBJECT_TARGET_INTERNAL ${${PROJECT_VAR_PREFIX}OBJECT_TARGETS_INTERNAL} )
    ADD_DEPENDENCIES( ${_OBJECT_TARGET_INTERNAL} ${_TARGET}-pbautogen )
  ENDFOREACH( _OBJECT_TARGET_INTERNAL ${${PROJECT_VAR_PREFIX}OBJECT_TARGETS_INTERNAL} )

ENDIF( NOT "${_PB_SOURCES}" STREQUAL "" )


#####  Include subdirs for processing  #####
GET_CMAKE_SUBDIRS( _SUBDIRS ${CMAKE_CURRENT_SOURCE_DIR} )

FOREACH( _SUBDIR ${_SUBDIRS} )
  ADD_SUBDIRECTORY( ${_SUBDIR} )
ENDFOREACH( _SUBDIR ${_SUBDIRS} )