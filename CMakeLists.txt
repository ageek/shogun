#   CMake-script for SHOGUN Machine Learning Toolbox
#   Copyright (C) 2013  Bj√∂rn Esser  <besser82@fedoraproject.org>
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.


#####  Setup CMake internal-stuff  #####
CMAKE_MINIMUM_REQUIRED( VERSION 2.8.8 )
SET( CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake" "${CMAKE_SOURCE_DIR}/cmake/Modules" ${CMAKE_MODULE_PATH} )


#####  Setup basic project-information  #####
SET( PROJECT_NAME "shogun" )
PROJECT( "${PROJECT_NAME}" )
STRING( SUBSTRING ${PROJECT_NAME} 0 1 PROJECT_NAME_CAPITAL )
STRING( TOUPPER ${PROJECT_NAME_CAPITAL} PROJECT_NAME_CAPITAL )
STRING( REGEX REPLACE "^.(.*)" "${PROJECT_NAME_CAPITAL}\\1" PROJECT_NAME_CAPITAL "${PROJECT_NAME}" )
STRING( TOUPPER ${PROJECT_NAME} PROJECT_NAME_UPPER )
SET( PROJECT_VAR_PREFIX "${PROJECT_NAME_UPPER}_" )


#####  Define configurable options  #####
OPTION( BUILD_DASHBOARD_REPORTS "Set to ON to activate reporting of Shogun builds" OFF )
OPTION( BUILD_EXAMPLES "Build Examples" ON )
OPTION( BUNDLE_ARPREC "Bundle ARPREC" OFF )
OPTION( BUNDLE_COLPACK "Bundle COLPACK" OFF )
OPTION( BUNDLE_EIGEN "Bundle Eigen" OFF )
OPTION( BUNDLE_JSON "Bundle JSON" OFF )
OPTION( BUNDLE_NLOPT "Bundle NLOPT" OFF )
OPTION( BUNDLE_TAPKEE "Bundle TAPKEE" OFF )
OPTION( CSharpModular "CSharp Modular" OFF )
OPTION( CmdLineStatic "CmdLine Static" OFF )
OPTION( ENABLE_CCACHE "Enable ccache for compilation" ON )
OPTION( ENABLE_COVERAGE "Enable code coverage" OFF )
OPTION( ENABLE_TESTING "Enable testing" OFF )
OPTION( HAVE_LARGEFILE "Large file support" ON )
OPTION( JavaModular "Java Modular" OFF )
OPTION( LuaModular "Lua Modular" OFF )
OPTION( MatlabStatic "Matlab Static" OFF )
OPTION( OctaveModular "Octave Modular" OFF )
OPTION( OctaveStatic "Octave Static" OFF )
OPTION( PerlModular "Perl Modular" OFF )
OPTION( PythonModular "Python Modular" OFF )
OPTION( PythonStatic "Python Static" OFF )
OPTION( RModular "R Modular" OFF )
OPTION( RStatic "R Static" OFF )
OPTION( RubyModular "Ruby Modular" OFF )
OPTION( TRACE_MEMORY_ALLOCS "Memory allocation tracing" OFF )
OPTION( TRAVIS_DISABLE_LIBSHOGUN_TESTS "Disable libshogun tests to speed up jobs on travis-ci" OFF )
OPTION( TRAVIS_DISABLE_UNIT_TESTS "Disable unit testing to speed up jobs on travis-ci" OFF )
OPTION( USE_BIGSTATES "Big (16bit) state" ON )
OPTION( USE_HMMCACHE "HMM cache" ON )
OPTION( USE_HMMDEBUG "HMM cache" OFF )
OPTION( USE_HMMPARALLEL "Parallel structures in hmm training" OFF )
OPTION( USE_LOGCACHE "Use (1+exp(x)) log cache (is much faster but less accurate)" OFF )
OPTION( USE_LOGSUMARRAY "Use sum array, supposed to be a bit more accurate" OFF )
OPTION( USE_ORIGINAL_LAPACK "Original LAPACK" OFF )
OPTION( USE_PATHDEBUG "Viterbi path debugging" OFF )
OPTION( USE_REFERENCE_COUNTING "Reference Counting" ON )
OPTION( USE_SHORTREAL_KERNELCACHE "Kernelcache to use 4-byte-floating-point values instead of 8-byte-doubles" ON )
OPTION( USE_SVMLIGHT "SVMLight" ON )
OPTION( USE_SWIG_DIRECTORS "Enable SWIG director classes" OFF )

SET( ${PROJECT_VAR_PREFIX}BUNDLE_ARPREC ${BUNDLE_ARPREC} )
SET( ${PROJECT_VAR_PREFIX}BUNDLE_COLPACK ${BUNDLE_COLPACK} )
SET( ${PROJECT_VAR_PREFIX}BUNDLE_EIGEN ${BUNDLE_EIGEN} )
SET( ${PROJECT_VAR_PREFIX}BUNDLE_JSON ${BUNDLE_JSON} )
SET( ${PROJECT_VAR_PREFIX}BUNDLE_NLOPT ${BUNDLE_NLOPT} )
SET( ${PROJECT_VAR_PREFIX}ENABLE_COVERAGE ${ENABLE_COVERAGE} )
SET( ${PROJECT_VAR_PREFIX}HAVE_LARGEFILE ${HAVE_LARGEFILE} )
SET( ${PROJECT_VAR_PREFIX}TRACE_MEMORY_ALLOCS ${TRACE_MEMORY_ALLOCS} )
SET( ${PROJECT_VAR_PREFIX}USE_BIGSTATES ${USE_BIGSTATES} )
SET( ${PROJECT_VAR_PREFIX}USE_HMMCACHE ${USE_HMMCACHE} )
SET( ${PROJECT_VAR_PREFIX}USE_HMMDEBUG ${USE_HMMDEBUG} )
SET( ${PROJECT_VAR_PREFIX}USE_HMMPARALLEL ${USE_HMMPARALLEL} )
SET( ${PROJECT_VAR_PREFIX}USE_LOGCACHE ${USE_LOGCACHE} )
SET( ${PROJECT_VAR_PREFIX}USE_LOGSUMARRAY ${USE_LOGSUMARRAY} )
SET( ${PROJECT_VAR_PREFIX}USE_PATHDEBUG ${USE_PATHDEBUG} )
SET( ${PROJECT_VAR_PREFIX}USE_REFERENCE_COUNTING ${USE_REFERENCE_COUNTING} )
SET( ${PROJECT_VAR_PREFIX}USE_SHORTREAL_KERNELCACHE ${USE_SHORTREAL_KERNELCACHE} )
SET( ${PROJECT_VAR_PREFIX}USE_SVMLIGHT ${USE_SVMLIGHT} )
SET( ${PROJECT_VAR_PREFIX}USE_SWIG_DIRECTORS ${USE_SWIG_DIRECTORS} )


#####  Include external CMake-scripts  #####
INCLUDE( CheckCXXSourceCompiles )
INCLUDE( CheckCXXSymbolExists )
INCLUDE( CheckFunctionExists )
INCLUDE( CheckIncludeFile )
INCLUDE( CheckSymbolExists )
INCLUDE( ShogunCommon )
INCLUDE( ShogunGlobalVars )
INCLUDE( ShogunUtils )
INCLUDE( ShogunVersion )


#####  Setup basic source locations  #####
SET(THIRD_PARTY_DIR ${CMAKE_SOURCE_DIR}/third_party)
SET(LIBSHOGUN_SRC_DIR ${CMAKE_SOURCE_DIR}/src/shogun)
SET(COMMON_MODULAR_SRC_DIR ${CMAKE_SOURCE_DIR}/src/interfaces/modular/)
SET( ${PROJECT_VAR_PREFIX}INCLUDE_DIRECTORIES
  "${CMAKE_CURRENT_SOURCE_DIR}/includes"
  "${CMAKE_CURRENT_BINARY_DIR}/includes"
  "${CMAKE_CURRENT_SOURCE_DIR}/src"
  "${CMAKE_CURRENT_BINARY_DIR}/src" )


#####  Detect OS-type  #####
IF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
	SET( ${PROJECT_VAR_PREFIX}OS_DARWIN 1 )
ELSEIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	SET( ${PROJECT_VAR_PREFIX}OS_LINUX 1 )
ELSEIF(${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD")
	SET( ${PROJECT_VAR_PREFIX}OS_FREEBSD 1 )
ENDIF()


#####  Setup basic install locations  #####
IF( NOT CMAKE_INSTALL_PREFIX )
  SET( CMAKE_INSTALL_PREFIX "/usr/local" )
ENDIF( NOT CMAKE_INSTALL_PREFIX )

IF( NOT BIN_INSTALL_DIR )
  SET( BIN_INSTALL_DIR "${CMAKE_INSTALL_PREFIX}/bin" )
ENDIF( NOT BIN_INSTALL_DIR )
STRING( REGEX REPLACE "^${CMAKE_INSTALL_PREFIX}/" "" BIN_INSTALL_DIR_NOPREFIX "${BIN_INSTALL_DIR}" )

IF( NOT INCLUDE_INSTALL_DIR )
  SET( INCLUDE_INSTALL_DIR "${CMAKE_INSTALL_PREFIX}/include" )
ENDIF( NOT INCLUDE_INSTALL_DIR )
STRING( REGEX REPLACE "^${CMAKE_INSTALL_PREFIX}/" "" INCLUDE_INSTALL_DIR_NOPREFIX "${INCLUDE_INSTALL_DIR}" )

IF( NOT LIB_SUFFIX )
  IF (CMAKE_SIZEOF_VOID_P MATCHES "8")
    SET( LIB_SUFFIX "64" )
  ELSE (CMAKE_SIZEOF_VOID_P MATCHES "8")
    SET( LIB_SUFFIX "" )
  ENDIF (CMAKE_SIZEOF_VOID_P MATCHES "8")
ENDIF( NOT LIB_SUFFIX )

IF( NOT LIB_INSTALL_DIR )
  SET( LIB_INSTALL_DIR "${CMAKE_INSTALL_PREFIX}/lib${LIB_SUFFIX}" )
ENDIF( NOT LIB_INSTALL_DIR )
STRING( REGEX REPLACE "^${CMAKE_INSTALL_PREFIX}/" "" LIB_INSTALL_DIR_NOPREFIX "${LIB_INSTALL_DIR}" )

IF( NOT SHARE_INSTALL_PREFIX )
  SET( SHARE_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}/share" )
ENDIF( NOT SHARE_INSTALL_PREFIX )
SET( SHARE_INSTALL_DIR "${SHARE_INSTALL_PREFIX}" )
STRING( REGEX REPLACE "^${CMAKE_INSTALL_PREFIX}/" "" SHARE_INSTALL_DIR_NOPREFIX "${SHARE_INSTALL_DIR}" )
SET( DATA_INSTALL_DIR "${SHARE_INSTALL_PREFIX}/${PROJECT_NAME}" )

IF( NOT SYSCONF_INSTALL_DIR )
  SET( SYSCONF_INSTALL_DIR "/etc" )
ENDIF( NOT SYSCONF_INSTALL_DIR )


#####  Find needed external packages  #####
FIND_PACKAGE( PkgConfig )

IF( PKG_CONFIG_FOUND )
  IF( NOT DARWIN OR NOT FREEBSD )
    pkg_search_module( LIBBSD QUIET libbsd bsd )
    IF( LIBBSD_FOUND )
      MESSAGE( STATUS "Found libbsd: version \"${LIBBSD_VERSION}\"" )
      SET( ${PROJECT_VAR_PREFIX}HAVE_LIBBSD 1 )
      LIST( APPEND INCLUDES ${LIBBSD_INCLUDE_DIRS} )
      SET( POSTLINKFLAGS ${POSTLINKFLAGS} ${LIBBSD_LDFLAGS} )
    ELSE ( LIBBSD_FOUND )
      MESSAGE( STATUS "Could NOT find libbsd" )
    ENDIF ( LIBBSD_FOUND )
  ENDIF( NOT DARWIN OR NOT FREEBSD )
ENDIF ( PKG_CONFIG_FOUND )

FIND_PACKAGE( Threads )
IF ( CMAKE_USE_PTHREADS_INIT )
	SET( ${PROJECT_VAR_PREFIX}HAVE_PTHREAD 1 )
	SET( POSTLINKFLAGS ${POSTLINKFLAGS} ${CMAKE_THREAD_LIBS_INIT} )
ENDIF()

FIND_PACKAGE(Mosek)
IF (MOSEK_FOUND)
	SET(USE_MOSEK 1)
	LIST(APPEND DEFINES USE_MOSEK)
	LIST(APPEND INCLUDES ${MOSEK_INCLUDE_DIR})
	SET(POSTLINKFLAGS ${POSTLINKFLAGS} ${MOSEK_LIBRARY})
ENDIF()

FIND_PACKAGE(OpenMP)
if (OPENMP_FOUND)
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif()

# prefer original LAPACK, if needed
OPTION(USE_ORIGINAL_LAPACK "Original LAPACK" OFF)

FIND_PACKAGE(LAPACK)
IF (LAPACK_FOUND)
	# find out whether it is Accelerate.framework we found for LaPack/BLAS
	IF("${LAPACK_LIBRARIES}" MATCHES ".*/Accelerate.framework$")
		SET( ${PROJECT_VAR_PREFIX}HAVE_MVEC 1 )

		#Accelerate framework provides HAVE_CATLAS
		SET( ${PROJECT_VAR_PREFIX}HAVE_CATLAS 1 )
		SET( ${PROJECT_VAR_PREFIX}HAVE_LAPACK 1 )
		SET(POSTLINKFLAGS ${POSTLINKFLAGS} ${LAPACK_LIBRARIES})
	ELSEIF("${LAPACK_LIBRARIES}" MATCHES ".*/mkl_.*")
		SET( ${PROJECT_VAR_PREFIX}HAVE_LAPACK 1 )
		SET( ${PROJECT_VAR_PREFIX}HAVE_MKL 1 )
	ELSE()
		FIND_PACKAGE(Atlas)
		IF(ATLAS_FOUND)
			SET( ${PROJECT_VAR_PREFIX}HAVE_ATLAS 1 )
			SET( ${PROJECT_VAR_PREFIX}HAVE_LAPACK 1 )
			IF(USE_ORIGINAL_LAPACK)
				SET(ATLAS_CLAPACK_LIBRARY)
				FOREACH(ITR ${ATLAS_LIBRARIES})
					IF(ITR MATCHES ".*atlas.*lapack.*" OR ITR MATCHES ".*lapack.*atlas.*")
					STRING(REGEX REPLACE "lapack" "clapack" ITR ${ITR})
					LIST(APPEND ATLAS_CLAPACK_LIBRARY ${ITR})
					ENDIF(ITR MATCHES ".*atlas.*lapack.*" OR ITR MATCHES ".*lapack.*atlas.*")
				ENDFOREACH(ITR ${ATLAS_LIBRARIES})
				MESSAGE(STATUS "using ATLAS-CLAPACK from: ${ATLAS_CLAPACK_LIBRARY}")
				SET(POSTLINKFLAGS ${POSTLINKFLAGS} ${LAPACK_LIBRARIES} ${ATLAS_CLAPACK_LIBRARY} ${ATLAS_LIBRARIES})
			ELSE(USE_ORIGINAL_LAPACK)
				SET(POSTLINKFLAGS ${POSTLINKFLAGS} ${ATLAS_LIBRARIES})
			ENDIF(USE_ORIGINAL_LAPACK)
		ELSE()
			FIND_PACKAGE(CBLAS)
		    if(CBLAS_LIBRARY)
			SET( ${PROJECT_VAR_PREFIX}HAVE_LAPACK 1 )
				SET(POSTLINKFLAGS ${POSTLINKFLAGS} ${LAPACK_LIBRARIES} ${CBLAS_LIBRARY})
			else()
				SET( ${PROJECT_VAR_PREFIX}HAVE_LAPACK 1 )
				SET(POSTLINKFLAGS ${POSTLINKFLAGS} ${LAPACK_LIBRARIES})
		    endif()
		ENDIF()
	ENDIF()
ENDIF()

FIND_PACKAGE(GLPK)
IF (GLPK_FOUND)
	SET( ${PROJECT_VAR_PREFIX}USE_GLPK 1 )
	LIST(APPEND INCLUDES ${GLPK_INCLUDE_DIRS})
	SET(POSTLINKFLAGS ${POSTLINKFLAGS} ${GLPK_LIBRARY})
ENDIF()

FIND_PACKAGE(CPLEX)
IF (CPLEX_FOUND)
	SET( ${PROJECT_VAR_PREFIX}USE_CPLEX 1 )
	LIST(APPEND INCLUDES ${CPLEX_INCLUDE_DIR})
	SET(POSTLINKFLAGS ${POSTLINKFLAGS} ${CPLEX_LIBRARY})
ENDIF()

FIND_PACKAGE(ARPACK)
IF (ARPACK_FOUND)
	SET( ${PROJECT_VAR_PREFIX}HAVE_ARPACK 1 )
	LIST(APPEND INCLUDES ${ARPACK_INCLUDE_DIR})
	SET(POSTLINKFLAGS ${POSTLINKFLAGS} ${ARPACK_LIB})
ENDIF()

OPTION(BUNDLE_EIGEN "Bundle Eigen" OFF)
IF(BUNDLE_EIGEN)
	include(external/Eigen3)
	SET( ${PROJECT_VAR_PREFIX}HAVE_EIGEN3 1 )
	LIST(APPEND DEFINES HAVE_EIGEN3)
	LIST(APPEND SYSTEM_INCLUDES ${EIGEN_INCLUDE_DIR})
ELSE()
	FIND_PACKAGE(Eigen3 3.1.2)
	IF (EIGEN3_FOUND)
		SET( ${PROJECT_VAR_PREFIX}HAVE_EIGEN3 1 )
		LIST(APPEND SYSTEM_INCLUDES ${EIGEN_INCLUDE_DIR})
	ENDIF()
ENDIF()

# COLPACK
OPTION(BUNDLE_COLPACK "Bundle COLPACK" OFF)
IF(BUNDLE_COLPACK)
	include(external/ColPack)
	SET( ${PROJECT_VAR_PREFIX}HAVE_COLPACK 1)
	LIST(APPEND INCLUDES ${COLPACK_INCLUDE_DIRS})
	SET(POSTLINKFLAGS ${POSTLINKFLAGS} ${COLPACK_LDFLAGS})
ELSE()
	IF (PKG_CONFIG_FOUND)
		pkg_search_module(COLPACK libColPack>=1.0.9 ColPack>=1.0.9)
		IF (COLPACK_FOUND)
			SET( ${PROJECT_VAR_PREFIX}HAVE_COLPACK 1)
			LIST(APPEND INCLUDES ${COLPACK_INCLUDE_DIRS})
			SET(POSTLINKFLAGS ${POSTLINKFLAGS} ${COLPACK_LDFLAGS})
		ENDIF()
	ENDIF()
ENDIF()

OPTION(BUNDLE_NLOPT "Bundle NLOPT" OFF)
IF(BUNDLE_NLOPT)
	include(external/NLopt)
	SET( ${PROJECT_VAR_PREFIX}HAVE_NLOPT 1)
	LIST(APPEND INCLUDES ${NLOPT_INCLUDE_DIR})
	SET(POSTLINKFLAGS ${POSTLINKFLAGS} ${NLOPT_LIBRARIES})
ELSE()
	FIND_PACKAGE(NLopt)
	IF (NLOPT_FOUND)
		SET( ${PROJECT_VAR_PREFIX}HAVE_NLOPT 1)
		LIST(APPEND INCLUDES ${NLOPT_INCLUDE_DIR})
		SET(POSTLINKFLAGS ${POSTLINKFLAGS} ${NLOPT_LIBRARIES})
	ENDIF()
ENDIF()

FIND_PACKAGE(LpSolve)
IF (LPSOLVE_FOUND)
  SET( ${PROJECT_VAR_PREFIX}USE_LPSOLVE 1 )
  SET( ${PROJECT_VAR_PREFIX}YY_NEVER_INTERACTIVE 1 )
  SET( ${PROJECT_VAR_PREFIX}PARSER_LP 1 )
  SET( ${PROJECT_VAR_PREFIX}INVERSE_ACTIVE "INVERSE_LUSOL" )
  SET( ${PROJECT_VAR_PREFIX}RoleIsExternalInvEngine 1 )
  LIST( APPEND INCLUDES ${LPSOLVE_INCLUDE_DIR} )
  SET( POSTLINKFLAGS ${POSTLINKFLAGS} ${LPSOLVE_LIBRARIES} )
ENDIF()

FIND_PACKAGE(ColPack)
IF(COLPACK_FOUND)
	SET( ${PROJECT_VAR_PREFIX}HAVE_COLPACK 1)
	LIST(APPEND INCLUDES ${COLPACK_INCLUDE_DIR})
	SET(POSTLINKFLAGS ${POSTLINKFLAGS} ${COLPACK_LIBRARIES})
ENDIF()

OPTION(BUNDLE_ARPREC "Bundle ARPREC" OFF)
IF(BUNDLE_ARPREC)
	include(external/ARPREC)
	SET( ${PROJECT_VAR_PREFIX}HAVE_ARPREC 1)
	LIST(APPEND INCLUDES ${ARPREC_INCLUDE_DIR})
	SET(POSTLINKFLAGS ${POSTLINKFLAGS} ${ARPREC_LIBRARIES})
ELSE()
	FIND_PACKAGE(ARPREC)
	IF(ARPREC_FOUND)
		SET( ${PROJECT_VAR_PREFIX}HAVE_ARPREC 1)
		LIST(APPEND INCLUDES ${ARPREC_INCLUDE_DIR})
		SET(POSTLINKFLAGS ${POSTLINKFLAGS} ${ARPREC_LIBRARIES})
	ENDIF()
ENDIF()

FIND_PACKAGE(Doxygen)
IF(DOXYGEN_FOUND)
	SET(HAVE_DOXYGEN 1)
	LIST(APPEND DEFINES HAVE_DOXYGEN)
ENDIF()

# detect PYTHON
FIND_PACKAGE(PythonInterp REQUIRED)

# JSON
OPTION(BUNDLE_JSON "Bundle JSON" OFF)
IF(BUNDLE_JSON)
	include(external/JSON)
	SET(HAVE_JSON 1)
	LIST(APPEND DEFINES HAVE_JSON)
	LIST(APPEND INCLUDES ${JSON_INCLUDE_DIRS})
	SET(POSTLINKFLAGS ${POSTLINKFLAGS} ${JSON_LDFLAGS})
ELSE()
	IF (PKG_CONFIG_FOUND)
		pkg_search_module(JSON libjson>=0.11 json>=0.11 json-c>=0.11)
		IF (JSON_FOUND)
			SET(HAVE_JSON 1)
			LIST(APPEND DEFINES HAVE_JSON)
			LIST(APPEND INCLUDES ${JSON_INCLUDE_DIRS})
			SET(POSTLINKFLAGS ${POSTLINKFLAGS} ${JSON_LDFLAGS})
		ENDIF()
	ENDIF()
ENDIF()

FIND_PACKAGE(LibXml2)
IF (LIBXML2_FOUND)
	SET(HAVE_XML 1)
	LIST(APPEND DEFINES HAVE_XML)
	LIST(APPEND INCLUDES ${LIBXML2_INCLUDE_DIR})
	SET(POSTLINKFLAGS ${POSTLINKFLAGS} ${LIBXML2_LIBRARIES})
ENDIF()

FIND_PACKAGE(HDF5)
IF (HDF5_FOUND)
	SET( ${PROJECT_VAR_PREFIX}HAVE_HDF5 1 )
	LIST(APPEND INCLUDES ${HDF5_INCLUDE_DIRS})
	SET(POSTLINKFLAGS ${POSTLINKFLAGS} ${HDF5_LIBRARIES})
ENDIF()

FIND_PACKAGE(CURL)
IF (CURL_FOUND)
	SET( ${PROJECT_VAR_PREFIX}HAVE_CURL 1)
	LIST(APPEND INCLUDES ${CURL_INCLUDE_DIRS})
	SET(POSTLINKFLAGS ${POSTLINKFLAGS} ${CURL_LIBRARIES})
ENDIF(CURL_FOUND)

FIND_PACKAGE(ZLIB)
IF (ZLIB_FOUND)
	SET( ${PROJECT_VAR_PREFIX}USE_GZIP 1)
	LIST(APPEND INCLUDES ${ZLIB_INCLUDE_DIRS})
	SET(POSTLINKFLAGS ${POSTLINKFLAGS} ${ZLIB_LIBRARIES})
ENDIF()

FIND_PACKAGE(BZip2)
IF (BZIP2_FOUND)
	SET( ${PROJECT_VAR_PREFIX}USE_BZIP2 1 )
	LIST(APPEND INCLUDES ${BZIP_INCLUDE_DIRS})
	SET(POSTLINKFLAGS ${POSTLINKFLAGS} ${BZIP2_LIBRARIES})
ENDIF()

FIND_PACKAGE(LibLZMA)
IF (LIBLZMA_FOUND)
	SET( ${PROJECT_VAR_PREFIX}USE_LZMA 1 )
	LIST(APPEND INCLUDES ${LIBLZMA_INCLUDE_DIRS})
	SET(POSTLINKFLAGS ${POSTLINKFLAGS} ${LIBLZMA_LIBRARIES})
ENDIF()

FIND_PACKAGE(SNAPPY)
IF (SNAPPY_FOUND)
	SET( ${PROJECT_VAR_PREFIX}USE_SNAPPY 1 )
	LIST(APPEND INCLUDES ${SNAPPY_INCLUDE_DIR})
	SET(POSTLINKFLAGS ${POSTLINKFLAGS} ${SNAPPY_LIBRARIES})
ENDIF()

FIND_PACKAGE(LZO)
IF (LZO_FOUND)
	SET( ${PROJECT_VAR_PREFIX}USE_LZO 1 )
	LIST(APPEND INCLUDES ${LZO_INCLUDE_DIR})
	SET(POSTLINKFLAGS ${POSTLINKFLAGS} ${LZO_LIBS})
ENDIF()

FIND_PACKAGE(Spinlock)
IF (SPINLOCK_FOUND)
	SET( ${PROJECT_VAR_PREFIX}USE_SPINLOCKS 1 )
	LIST(APPEND DEFINES USE_SPINLOCKS)
ENDIF()

FIND_PACKAGE(Protobuf)
IF (PROTOBUF_FOUND)
	SET( ${PROJECT_VAR_PREFIX}HAVE_PROTOBUF 1 )
	LIST(APPEND INCUDES ${PROTOBUF_INCLUDE_DIRS})
	SET(POSTLINKFLAGS ${POSTLINKFLAGS} ${PROTOBUF_LIBRARIES})
ENDIF()


#####  Look-up symbols  #####
CHECK_CXX_SYMBOL_EXISTS( isfinite "cmath" ${PROJECT_VAR_PREFIX}HAVE_CXX_ISFINITE )
CHECK_CXX_SYMBOL_EXISTS( isinf "cmath" ${PROJECT_VAR_PREFIX}HAVE_CXX_ISINF )
CHECK_CXX_SYMBOL_EXISTS( isnan "cmath" ${PROJECT_VAR_PREFIX}HAVE_CXX_ISNAN )
CHECK_CXX_SYMBOL_EXISTS( signgam "cmath" ${PROJECT_VAR_PREFIX}HAVE_CXX_SIGNGAM )

IF( ${PROJECT_VAR_PREFIX}OS_UNIX )
  SET( CMAKE_REQUIRED_LIBRARIES m )
ENDIF( ${PROJECT_VAR_PREFIX}OS_UNIX )

CHECK_FUNCTION_EXISTS( log2 ${PROJECT_VAR_PREFIX}HAVE_LOG2 )
CHECK_FUNCTION_EXISTS( powl ${PROJECT_VAR_PREFIX}HAVE_POWL )
CHECK_FUNCTION_EXISTS( lgammal ${PROJECT_VAR_PREFIX}HAVE_LGAMMAL )
CHECK_FUNCTION_EXISTS( sqrtl ${PROJECT_VAR_PREFIX}HAVE_SQRTL )
CHECK_FUNCTION_EXISTS( finite ${PROJECT_VAR_PREFIX}HAVE_FPCLASS )
CHECK_FUNCTION_EXISTS( fpclass ${PROJECT_VAR_PREFIX}HAVE_FPCLASS )
CHECK_FUNCTION_EXISTS( isfinite ${PROJECT_VAR_PREFIX}HAVE_ISFINITE )
CHECK_FUNCTION_EXISTS( isinf ${PROJECT_VAR_PREFIX}HAVE_ISINF )
CHECK_FUNCTION_EXISTS( isnan ${PROJECT_VAR_PREFIX}HAVE_ISNAN )

CHECK_CXX_SOURCE_COMPILES(
  "#include <cmath>\nint main() { return std::isinf( 0 ); }\n"
  ${PROJECT_VAR_PREFIX}HAVE_STD_ISINF )
CHECK_CXX_SOURCE_COMPILES(
  "#include <cmath>\nint main() { return std::isfinite( 0 ); }\n"
  ${PROJECT_VAR_PREFIX}HAVE_STD_ISFINITE )
CHECK_CXX_SOURCE_COMPILES(
  "#include <cmath>\nint main() { return std::isnan( 0 ); }\n"
  ${PROJECT_VAR_PREFIX}HAVE_STD_ISNAN )

IF( NOT CYGWIN )
  CHECK_INCLUDE_FILE( xmmintrin.h ${PROJECT_VAR_PREFIX}HAVE_BUILTIN_VECTOR )
  CHECK_INCLUDE_FILE( emmintrin.h ${PROJECT_VAR_PREFIX}HAVE_SSE2 )
ENDIF( NOT CYGWIN )

###### checks for random
IF( NOT ${PROJECT_VAR_PREFIX}OS_DARWIN OR NOT ${PROJECT_VAR_PREFIX}OS_FREEBSD AND ${PROJECT_VAR_PREFIX}HAVE_LIBBSD )
  LIST( APPEND CMAKE_REQUIRED_LIBRARIES ${LIBBSD_LDFLAGS} )
  CHECK_SYMBOL_EXISTS( arc4random "bsd/stdlib.h" ${PROJECT_VAR_PREFIX}HAVE_ARC4RANDOM_NOT_USED )
  LIST( REMOVE_ITEM CMAKE_REQUIRED_LIBRARIES ${LIBBSD_LDFLAGS} )
ELSE( NOT ${PROJECT_VAR_PREFIX}OS_DARWIN OR NOT ${PROJECT_VAR_PREFIX}OS_FREEBSD AND ${PROJECT_VAR_PREFIX}HAVE_LIBBSD )
  CHECK_FUNCTION_EXISTS( arc4random ${PROJECT_VAR_PREFIX}HAVE_ARC4RANDOM )
ENDIF( NOT ${PROJECT_VAR_PREFIX}OS_DARWIN OR NOT ${PROJECT_VAR_PREFIX}OS_FREEBSD AND ${PROJECT_VAR_PREFIX}HAVE_LIBBSD )

IF( NOT ${PROJECT_VAR_PREFIX}HAVE_ARC4RANDOM )
    IF( EXISTS /dev/urandom )
      SET( ${PROJECT_VAR_PREFIX}DEV_RANDOM "/dev/urandom" CACHE INTERNAL "" FORCE )
    ELSEIF( EXISTS /dev/random )
      SET( ${PROJECT_VAR_PREFIX}DEV_RANDOM "/dev/random" CACHE INTERNAL "" FORCE )
    ENDIF( EXISTS /dev/urandom )
ENDIF( NOT ${PROJECT_VAR_PREFIX}HAVE_ARC4RANDOM )

SET( ${PROJECT_VAR_PREFIX}HAVE_CXX11 1 )

##### Add subdirs #####

##### The order of the sub-dirs to be added is important here.
ADD_SUBDIRECTORY( cmake/auxilary_scripts )
ADD_SUBDIRECTORY( configs )
ADD_SUBDIRECTORY( include )
ADD_SUBDIRECTORY( src )
ADD_SUBDIRECTORY( examples )
